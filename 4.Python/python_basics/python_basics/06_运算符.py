"""
运算符
    Python语言支持以下类型的运算符:
        算术运算符
        比较(关系)运算符
        赋值运算符
        逻辑运算符
        位运算符
        成员运算符
        身份运算符
        远算符优先级
"""

# 1. Python算术运算符
# 假设以下变量a = 10, 变量b = 21:
"""
    运算符             描述                          实例
      +               加 - 两个对象相加               a + b 输出结果31
      -               减 - 两个对象相减               a - b 输出结果-11
      *               乘 - 两个数相乘或是返回一个
                           被重复若干次的字符串        a * b 输出结果210
      /               除 - x 除以y                   b / a 结果输出2.1
      %               取模 - 返回除法的余数            b % a 结果输出1
      **              幂 - 返回x 的 y次幂             a**b 为10 的21次方
      //              取整除 - 往小的方向取整数         9 // 2   4
                                                    -9 // 2  -5 
"""
# 以下实例演示了Python所有算术运算符的操作
a = 21
b = 10
c = 0

c = a + b
print("c1的值为: ",c)

c = a - b
print("c2 的值为: ", c)

c = a * b
print("c3的值为: ",c)

c = a / b
print("c4的值为: ", c)

c = a % b
print("c5的值为: ", c)

# 修改变量 a, b, c
a = 2
b = 3
c = a ** b
print("c6的值为: ", c)

a = 10
b = 5
c = a // b
print("c7的值为: ", c)

"""
c1的值为:  31
c2 的值为:  11
c3的值为:  210
c4的值为:  2.1
c5的值为:  1
c6的值为:  8
c7的值为:  2
"""

# 2. Python比较运算符
# 以下假设变量a 为 10, 变量b为20:
"""
    运算符                              描述                                        实例
    ==                              等于 - 比较对象是否相等                       (a == b)返回False
    !=                              不等于 - 比较两个对象是否不相等                (a != b)返回Ture
    >                               大于 - 返回x是否大于y                        (a > b)返回False
    <                               小于 - 返回x是否小于y. 所有比较运算符返回1表示真, (a < b)返回真 
                                    返回0表示假. 这分别与特殊的变量Ture和False等价. 
                                    注意, 这些变量名的大写.
    >=                              大于等于 - 返回x是否大于等于y                  (a >= b)返回False
    <=                              小于等于 - 返回x是否小于等于y                  (a <= b) Ture
"""
# 以下实例演示了Python所有的比较运算符操作:
a = 21
b = 10
c = 0

if (a == b):
    print("1 - a 等于b")
else:
    print("1 - a 不等于 b")

if (a != b):
    print("2 - a 不等于b")
else:
    print("2 - a 等于b")

if (a < b):
    print("3 - a 小于b ")
else:
    print("3 - a 大于等于b")

if (a > b):
    print("4 - a 大于b")
else:
    print("4 - a 小于等于b")

# 修改变量a 和 b的值
a = 5
b = 20

if (a <= b):
    print("5 - a 小于等于b")
else:
    print("5 - a 大于b")

if (a >= b):
    print("6 - a 大于等于 b")
else:
    print("6 - a 小于b")
"""
1 - a 不等于 b
2 - a 不等于b
3 - a 大于等于b
4 - a 大于b
5 - a 小于等于b
6 - a 小于b
"""

# 3. Python赋值运算符
# 以下假设变量a为10, 变量b 为20:
"""
运算符                 描述                      实例
 =                    简单的赋值运算符            c = a + b 将a + b 的结果赋值为c
+=                    加法赋值运算符              c += a 等效于 c = c + a
-=                    减法赋值运算符              c -= a 等效于 c = c - a
*=                    乘法赋值运算符              c *= a 等效于 c = c * a
/=                    除法赋值运算符              c /= a 等效于 c = c / a
%=                    取模赋值运算符              c %= a 等效于 c = c % a
**=                   幂赋值运算符                c **= a 等效于 c = c ** a
//=                   取整除赋值运算符             c //= a 等效于 c = c // a
:=                    海象运算符, 这个运算符的         在这个示例中, 赋值表达式可以避免被调用两次:
                      主要目的是在表达式中同时进行       if (n := len(a)) > 10:
                      赋值和返回赋值的值                      print(f"List is too long {n} elements, 
                                                    expected <= 10")
"""
"""
在Python3.8及更高版本中, 引入了一种新的语法特性, 称为 "海象运算符"
它使用:=符号. 这个运算符的主要目的是在表达式中使用赋值结果的情况下. 
这对于简化循环条件或表达式中的重复计算很有用:
实例:
"""
# 传统写法
n = 10
if n > 5:
    print(n)

# 使用海象运算符
if (n := 10) > 5:
    print(n)
"""
海象运算符 := 允许我们在条件语句中同时计算并赋值 n * n, 然后将结果进行比较, 
这可以减少代码的行数并使代码更紧凑.
"""

# 4. Python位运算符
"""
按位运算符是把数字看作二进制来进行计算的. Python中的按位运算法则如下:
下表中的变量a 为 60, b 为 13二进制格式如下:
"""
"""
a = 0011 1100
b = 0000 1101

a&b = 0000 1100
a|b = 0011 1101
a^b = 0011 0001
~a = 1100 0011 
"""

"""
运算符             描述                                          实例
&                 按位与运算符: 参与运算的两个值, 如果两个相应         (a & b)输出结果为12, 二进制解释:
                  位都为1, 则该位的结果为1, 否则为0                  0000 1100

|                 按位或运算符: 只要对应的二个二进位有一个为1时,        (a | b)输出结果61, 二进制解释:
                  结果位就为1                                      0011 1101

~                 按位取反运算符: 对数据的每个二进制位取反,            (~a) 输出结果-61, 二进制解释: 
                  即把1变为0, 把0变为1. ~x类似于-x-1                1100 0011, 在一个有符号二进制
                                                                数的补码形式
                                                        
<<                左移动运算符: 运算数的各二进制位全部左移若干位,       a << 2输出结果为240, 二进制解释:
                  由"<<"右边的数指定移动的位数, 高位丢弃,             1111 0000
                  低位补0      
                  
>>                右移动运算符: 把">>"左边的运算数的各二进位          a >> 2输出结果15, 二进制解释:
                  全部右移若干位, ">>"右边的数指定移动的位数          0000 1111
"""
# 以下实例演示了Python所有位运算符的操作:
a = 60      # 60 = 0011 1100
b = 13      # 13 = 0000 1101
c = 0

c = a & b  # 12 = 0000 1100
print("1 - c的值为: ", c)

c = a | b  # 61 = 0011 1101
print("2 - c的值为: ",c)

c = a ^ b # 49 = 0011 0001
print("3 - c的值为: ",c)

c = ~a  # -61 = 1100 0011
print("4 - c的值为: ",c)

c = a << 2 # 240 = 1111 0000
print("5 - c的值为: ",c)

c = a >> 2 # 15 = 0000 1111
print("6 - c的值为: ",c)

"""
1 - c的值为:  12
2 - c的值为:  61
3 - c的值为:  49
4 - c的值为:  -61
5 - c的值为:  240
6 - c的值为:  15
"""

# 5. Python逻辑运算符
# Python语言支持逻辑运算符, 以下假设变量a 为 10, b 为 20:
"""
运算符   逻辑表达式   描述                                        实例
and     x and y    布尔"与" 如果x为False, x and y 返回x的值,      (a and b) 返回20. 
                   否则返回y的计算值
    
or      x or y     布尔"或" 如果x是True, 它返回x的值,              (a and b) 返回10 
                   否则它返回y的计算值

not     not x      布尔"非" 如果x为Ture, 返回False. 如果x为        not(a and b)返回False
                   False, 它返回Ture.      
"""

a = 10
b = 20

if (a and b):
    print("1 - 变量a 和 b 都为True")
else:
    print("1 - 变量a 和 b 有一个不为True")

if (a or b):
    print("2 - 变量a 和 b 都为True, 或者有一个为True")
else:
    print("2 - 变量a 和 b 都不为True")

# 修改a的值
a = 0

if (a and b):
    print("3 - 变量a 和 b 都为true")
else:
    print("3 - 变量a 和 b 有一个不为true")

if (a or b):
    print("4 - 变量a 和 b 都为true, 或者其中有一个为true")
else:
    print("4 - 变量a 和 b 都不为true")

if not(a and b):
    print("5 - 变量a 和 b 都为false, 或者其中一个变量为false")
else:
    print("5 - 变量a 和 b 都为true")

"""
1 - 变量a 和 b 都为True
2 - 变量a 和 b 都为True, 或者有一个为True
3 - 变量a 和 b 有一个不为true
4 - 变量a 和 b 都为true, 或者其中有一个为true
5 - 变量a 和 b 都为false, 或者其中一个变量为false
"""

# 6. 成员运算符
"""
in          判断某个元素是否存在于指定的序列中, 存在返回true, 否则返回false
in not      判断某个元素是否不存在于指定的序列中, 不存在返回true, 存在返回false
"""
arr = [23,4,54,6,75,14]
if (23 in arr):
    print("23 in arr")
else:
    print("23 not in arr")

if (3 not in arr):
    print("3 not in arr")
else:
    print("3 in arr")

# 7. 身份运算符
"""
    is       判断两个标识符是否引用自一个对象, 如果引用自一个对象返回true, 否则返回false
    is not   判断两个标识符是否引用自不同的对象, 如果引用自不同的对象返回true, 否则返回false
"""
a = 20
b = 20

if (a is b):
    print("a 和 b引用自一个对象")
else:
    print("a 和 b引用自不同的对象")

if (id(a) == id(b)):
    print("a 和 b引用自一个对象")
else:
    print("a 和 b引用自不同的对象")

# 修改a
a = 40
if (a is not b):
    print("a 和 b引用自不同的对象")
else:
    print("a 和 b引用自一个对象")

if (id(a) == id(b)):
    print("a 和 b引用自同一个对象")
else:
    print("a 和 b引用自不同的对象")
